<h2>按理论分类</h2>
<table class="table_normal">
  <tr>
    <th colspan="5">原始类型</th>
    <th colspan="2">引用类型</th>
  </tr>
  <tr>
    <td>Number</td>
    <td>Boolean</td>
    <td>String</td>
    <td>Undefined</td>
    <td>Null</td>
    <td>Array、Date</td>
    <td>其余Object</td>
  </tr>
</table>

<h2>按typeof分类</h2>
<table class="table_normal">
  <tr>
    <th>typeof的值</th>
    <th>number</th>
    <th>string</th>
    <th>boolean</th>
    <th>undefined</th>
    <th>function</th>
    <th>object</th>
  </tr>
  <tr>
    <th>说明</th>
    <td>数字伪对象</td>
    <td>字符串伪对象</td>
    <td>bool类型伪对象</td>
    <td>undefined</td>
    <td>function类型</td>
    <td>null、Array、Date及其它对象</td>
  </tr>
  <tr>
    <th>例子</th>
    <td>1 \ 2 \ 0xa</td>
    <td>"1213"</td>
    <td>false</td>
    <td>undefined</td>
    <td>function a(){}</td>
    <td>null \ {a:1} \ [1,2] \ new Number(1)</td>
  </tr>
</table>

<h2>解读</h2>
<div class="alert_tip">
  原始值和引用值是以“如何存在内存中”为区分基准的.原始值是存在<b>栈(stack)</b>中的<b>简单数据段</b>，引用值是存在<b>堆(heap)</b>中的<b>对象</b>.<br>
</div>
<p>
  注意，引用值就是对象. 
</p>
<div class="alert_tip">
  所谓对象，在ECMAScript中，是由特性（attribute）构成的无序集合，每个特性存放一个原始值（属性property）、对象（属性）或者函数（方法method）. <br>
</div>
<p class="quote">
  根据《编写可维护的javascript》P52 <br>
  Javascirpt中有3种「原始包装类型(Primitive Wrapper Types)」：String、Boolean、Number。每种类型都代表全局作用域中的一个构造函数，并分别表示各自对象对应的原始值的对象。原始包装类型的主要作用是让原始值具有对象般的行为。
</p>
<p>
  在Javascript中，只有null和undefined不是对象，其它3个原始类型Number\String\Boolean在js上下文环境中都是以原始包装类型表现出来的。例如"(2).toString();"这样的表达方式都是正确的。这里的2其实是对象，和new Number(2)是一样的。 <br>
  我们称这3个类型的值为'伪对象',（是原始值，但可以作引用类型使用） <br>
  就目前我的认知来看，除了null、undefined外还无法直接获得原始值.用js获得的所有“原始值”其实都是"伪对象".
</p>
<div class="alert_tip">
  原始包装类型是临时创建的。
</div>
<p>
  // 来自《编写可维护的javascript》的例子
  var name = "String"; <br>
  name.getAProperty = true; // 获取一个临时对象，执行完后删除此对象 <br>
  console.log(name.getAProperty); // undefined
</p>
<div class="alert_tip">
  从以上例子可知，每次原始值调用方法或者属性的时候，都是<strong>临时</strong>获取一个原始包装类型的对象，然后调用该对象的方法和属性。从而表现出“伪对象”的特征
</div>
<table class="table_normal">
  <tr>
    <th>伪对象</th>
    <th>原始包装类型</th>
  </tr>
  <tr>
    <td>var numN = 23 (typeof:number)</td>
    <td>var numO = new Number(23) (typeof:object)</td>
  </tr>
</table>
<div class="alert_tip">
  1.numO.valueOf() === numN 相应转换关系。<br>
  2.numN.toFixed() “伪对象”可以调用相应的方法。<br>
  3.numN instanceOf Number === false ; numO instanceOf Number === true。伪对象无法通过instanceOf的验证。
</div>

<h2>最佳实践</h2>
<div class="alert_tip">
  Object.prototype.toString.call([])  // "[object Array]"
</div>

<p class="quote">
- javascript garden - <br>
为了检测一个对象的类型，强烈推荐使用 Object.prototype.toString 方法； 因为这是唯一一个可依赖的方式。正如上面表格所示，typeof 的一些返回值在标准文档中并未定义， 因此不同的引擎实现可能不同。 <br>

除非为了检测一个变量是否已经定义，我们应尽量避免使用 typeof 操作符。
</p>


